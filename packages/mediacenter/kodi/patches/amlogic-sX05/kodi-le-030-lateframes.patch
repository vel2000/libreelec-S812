From db079d2aa819da24b158ec9040ba7bad768662b4 Mon Sep 17 00:00:00 2001
From: RealJohnGalt <johngalt@fake.mail>
Date: Fri, 7 Jul 2017 00:02:53 -0700
Subject: [PATCH] VideoPlayer: @afl1 lateframes

---
 xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp | 10 +++++++---
 1 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
index 7023dfe..dfc0aac 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/RenderManager.cpp
@@ -231,7 +231,7 @@
     m_lateframes = -1;
     m_presentevent.notifyAll();
     m_renderedOverlay = false;
-    m_renderDebug = false;
+    m_QueueSkip = 0;
     m_clockSync.Reset();
     m_dvdClock.SetVsyncAdjust(0);
 
@@ -1062,7 +1062,8 @@
   XbmcThreads::EndTime endtime(timeout);
   while(m_free.empty())
   {
-    m_presentevent.wait(lock, std::min(50, timeout));
+    CLog::Log(LOGDEBUG, "CRenderManager::WaitForBuffer - timeout:%d",std::min(20, timeout));
+    m_presentevent.wait(lock, std::min(20, timeout));
     if (endtime.IsTimePast() || bStop)
     {
       if (timeout != 0 && !bStop)
@@ -1115,7 +1115,7 @@
     double err = fmod(renderPts - nextFramePts, frametime);
     m_clockSync.m_error += err;
     m_clockSync.m_errCount ++;
-    if (m_clockSync.m_errCount > 30)
+    if (m_clockSync.m_errCount > 120)
     {
       double average = m_clockSync.m_error / m_clockSync.m_errCount;
       m_clockSync.m_syncOffset = average;
@@ -1143,9 +1143,12 @@
       // renderer/drivers have internal queues, being slightly late here does not mean that
       // we are really late. The likelihood that we recover decreases the greater m_lateframes
       // get. Skipping a frame is easier than having decoder dropping one (lateframes > 10)
-      double x = (m_lateframes <= 6) ? 0.98 : 0;
+      double x = (m_lateframes <= 10) ? 1.99 : 0.0;
-      if (renderPts < m_Queue[*iter].pts + x * frametime)
+      if (m_dvdClock.GetClock() < m_Queue[*iter].pts + x * frametime)
         break;
+      m_QueueSkip++;
+      CLog::Log(LOGDEBUG, "CRenderManager::PrepareNextRender m_QueueSkip:%d iter.pts:%0.4f renderPts:%0.4f  m_lf:%d lf:%d latency:%0.3f dvdClock:%0.4f",
+          m_QueueSkip, m_Queue[*iter].pts / DVD_TIME_BASE,  renderPts / DVD_TIME_BASE, m_lateframes,  static_cast<int>((renderPts - m_Queue[*iter].pts) * m_fps / DVD_TIME_BASE), m_displayLatency / DVD_TIME_BASE, m_dvdClock.GetClock() / DVD_TIME_BASE);
       idx = *iter;
       ++iter;
     }
@@ -1154,7 +1159,7 @@
       if (m_presentsourcePast >= 0)
       {
         m_discard.push_back(m_presentsourcePast);
-        m_QueueSkip++;
+//        m_QueueSkip++;
       }
       m_presentsourcePast = m_queued.front();
       m_queued.pop_front();
2.13.0

